html
    head
        link(rel='stylesheet', href='http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css')
        link(rel='stylesheet', href='javascripts/codemirror-5.25.0/lib/codemirror.css')
        script(src='javascripts/codemirror-5.25.0/lib/codemirror.js')
        script(src='javascripts/codemirror-5.25.0/mode/sql/sql.js')
        style(type='text/css').
          .CodeMirror {
            border:1px solid black;
            flex:1;
          }
    body
        #wrapper(style='display: flex; flex-flow:row; min-height: 100%;')
          #map(style='display: inherit; flex: 7; flex-flow: column; min-width: 70%;')
          #pane(style='display: inherit; flex: 3; flex-flow: column; max-width: 30%;')
            textarea#code(name='code', style='display: inherit; flex: 1;').
              select name, point
              from cafes
              order by
                point <->
                'SRID=4326;Point(25.0376636 121.5618483)'
              limit 10;
            #result(style='display: inherit; flex: 1; flex-flow: column; justify-content: center; ')
              button#send(style='display: inherit; flex: 1;', onclick='send()') Send
              textarea(style='display: inherit; flex: 9;')

        script(src='http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js')

        script.
            window.onload = function() {
              window.editor = CodeMirror.fromTextArea(document.getElementById('code'), {
                mode: 'text/x-pgsql',
                indentWithTabs: true,
                smartIndent: true,
                lineNumbers: true,
                matchBrackets : true,
                autofocus: true,
                extraKeys: {"Ctrl-Space": "autocomplete"},
                hintOptions: {tables: {
                  users: {name: null, score: null, birthDate: null},
                  countries: {name: null, population: null, size: null}
                }}
              });
            }
            
        script.
          var map = L.map("map").setView([25.0419989,121.5655422], 15);
          L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'}).addTo(map)
          function onLocationFound(e) {
            var radius = e.accuracy / 2;
            L.marker(e.latlng).addTo(map)
            .bindPopup("You are within " + radius + " meters from this point").openPopup();
            
            L.circle(e.latlng, radius).addTo(map);
          }
          
          function onLocationError(e) {
            alert(e.message);
          }
          
          function send() {
            // Grab query from #code
            query = encodeURIComponent(window.editor.getValue());
            
            // Get result using endpoing /sql?q=
            fetch('http://localhost:3000/sql?q=' + query)
              .then(res => res.json())
              .then((out) => {
                addLayer(out);
              })
              .catch((err) => {
                console.log(err);
              })
            // Update map using result
          }
          
          function addLayer(features) {
            //create an L.geoJson layer, add it to the map
            //- features['features'].forEach((feature) => console.log(feature.geometry.coordinates));
            var layer = L.geoJson(features, {
              pointToLayer: function(feature, latlng) {
                return L.marker(latlng);
              },
              onEachFeature: function(feature, layer) {
                layer.bindPopup(feature.properties.name);
              }
            }).addTo(map)
            map.fitBounds(layer.getBounds());
          }
          
          function updateMap() {
            
          }
          
          map.on('locationfound', onLocationFound);
          map.on('locationerror', onLocationError);
          
          map.locate({setView: true, maxZoom: 16});
